(ns mabasic\json\json
    (:use \Exception))

(defn- phel-to-php [x]
    (cond
        (php/is_iterable x)
            (let [arr (php/array)]
                (foreach [k v x]
                    (if (php/is_iterable k) (throw (php/new Exception "Key cannot be iterable.")))
                    (php/aset arr (phel-to-php k) (phel-to-php v)))
                arr)
        (symbol? x) (str (php/-> x (getName)))
        (keyword? x) (str (php/-> x (getName)))
        (float? x) (str x)
        true x))

(defn encode [value & [@{:flags flags :depth depth}]]
    (let [flags (or flags 0)
          depth (or depth 512)]
        (if (not (int? flags)) (throw (php/new Exception "Flags must be an integer.")))
        (if (not (int? depth)) (throw (php/new Exception "Depth must be an integer.")))
        (if (not (> depth 0)) (throw (php/new Exception "Depth must be greater than zero.")))
        (php/json_encode (phel-to-php value) flags depth)))