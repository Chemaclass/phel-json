(ns mabasic\json\tests\json
    (:require mabasic\json\json)
    (:require phel\test :refer [deftest is]))

(deftest test-encode-basic-types
    (is (= "null" (json/encode nil)))
    (is (= "true" (json/encode true)))
    (is (= "false" (json/encode false)))
    (is (= "\"string\"" (json/encode "string")))
    (is (= "\":keyword\"" (json/encode :keyword)))
    (is (= "3.14" (json/encode 3.14)))
    (is (= "1" (json/encode 1))))

(deftest test-encode-tuple
    (is (=
            "[1,2,3]"
            (json/encode [1 2 3])))
    (is (=
            "[1,2,[1,2]]"
            (json/encode [1 2 [1 2]])))
    (is (=
            "[1,2,\"string\"]"
            (json/encode [1 2 "string"])))
    (is (=
            "[1,2,{\":year\":2020,\"planet\":\"Earth\"}]"
            (json/encode [1 2 @{:year 2020
                                "planet" "Earth"}])))
    (is (=
            "[1,2,{\":year\":2020,\"planet\":\"Earth\",\"tuple\":[\"multi\",\"ple\"]}]"
            (json/encode [1 2 @{:year 2020
                                "planet" "Earth"
                                "tuple" ["multi" "ple"]}]))))

(deftest test-encode-array
    (is (= "[1,2,3]" (json/encode @[1 2 3])))
    (is (= "[1,2,[1,2]]" (json/encode @[1 2 @[1 2]]))))

(deftest test-encode-set
    (is (= "[1,2,3]" (json/encode (set 1 2 3))))
    (is (= "[1,2,[1,2]]" (json/encode (set 1 2 (set 1 2))))))

(deftest test-encode-table
    (is (=
        "{\"first_name\":\"Mario\",\"last_name\":\"Basic\"}"
        (json/encode @{"first_name" "Mario"  "last_name" "Basic"})))
    (is (=
        "{\"first_name\":[\"Super\",\":mario\"],\"last_name\":\"Basic\"}"
        (json/encode @{"first_name" @["Super" :mario]
                       "last_name" "Basic"}))))

(defstruct person [first_name last_name age])

(deftest test-encode-struct
    (let [me (person "Mario" "Basic" 30)]
        (is (= "{\":first_name\":\"Mario\",\":last_name\":\"Basic\",\":age\":30}" (json/encode me)))))